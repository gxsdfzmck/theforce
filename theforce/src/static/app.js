// Generated by CoffeeScript 1.10.0
(function() {
  var app;

  app = angular.module('myapp', ['ui.bootstrap', 'ivh.treeview']);

  app.config([
    '$interpolateProvider', function($interpolateProvider) {
      $interpolateProvider.startSymbol('{[{');
      return $interpolateProvider.endSymbol('}]}');
    }
  ]);

  app.filter('to_trusted', [
    '$sce', function($sce) {
      return function(text) {
        return $sce.trustAsHtml(text);
      };
    }
  ]);

  app.controller('MyController', [
    '$scope', '$http', '$uibModal', function($scope, $http, $uibModal) {
      var error_handler, modalInstance;
      $scope.isProcessing = false;
      $scope.selections = [];
      $scope.isResultCollapsed = true;
      $http.get('/fs').then(function(response) {
        return $scope.filesystem = response.data;
      }, error_handler);
      modalInstance = null;
      error_handler = function(response) {
        alert('发生错误');
        console.log(response);
        if (modalInstance) {
          return modalInstance.close();
        }
      };
      $scope.check = function() {
        modalInstance = $uibModal.open({
          animation: true,
          templateUrl: 'loading.html',
          backdrop: 'static',
          size: 'lg'
        });
        return $http.post('/check', {
          fs: $scope.selections.join(',')
        }).then(function(response) {
          $scope.results = response.data;
          $scope.isResultCollapsed = false;
          return modalInstance.close();
        }, error_handler);
      };
      return $scope.fscb = function(ivhNode, ivhIsSelected, ivhTree) {
        var i, item, j, len, ref, selections, stack;
        selections = [];
        stack = [];
        stack.push(ivhTree);
        while (true) {
          if (stack.length === 0) {
            break;
          }
          item = stack.pop();
          if (item.selected && item['value']) {
            selections.push(item['value']);
          }
          if (item['children']) {
            ref = item['children'];
            for (j = 0, len = ref.length; j < len; j++) {
              i = ref[j];
              stack.push(i);
            }
          }
        }
        return $scope.selections = selections;
      };
    }
  ]);

}).call(this);
